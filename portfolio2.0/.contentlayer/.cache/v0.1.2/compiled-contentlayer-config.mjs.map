{
  "version": 3,
  "sources": ["../../../contentlayer.config.ts"],
  "sourcesContent": ["import {\r\n    ComputedFields,\r\n    defineDocumentType,\r\n    makeSource\r\n  } from 'contentlayer/source-files';\r\n  \r\n  import readingTime from 'reading-time';\r\n  import remarkGfm from 'remark-gfm';\r\n  import rehypeSlug from 'rehype-slug';\r\n  import rehypeCodeTitles from 'rehype-code-titles';\r\n  import rehypeAutolinkHeadings from 'rehype-autolink-headings';\r\n  import rehypePrism from 'rehype-prism-plus';\r\n  \r\n  const computedFields: ComputedFields = {\r\n    readingTime: { type: 'json', resolve: (doc) => readingTime(doc.body.raw) },\r\n    wordCount: {\r\n      type: 'number',\r\n      resolve: (doc) => doc.body.raw.split(/\\s+/gu).length\r\n    },\r\n    tweetIds: {\r\n      type: 'json',\r\n      resolve: (doc) => {\r\n        const tweetMatches = doc.body.raw.match(\r\n          /<StaticTweet\\sid=\"[0-9]+\"\\s\\/>/g\r\n        );\r\n        const tweetIDs = tweetMatches?.map((tweet) => tweet.match(/[0-9]+/g)[0]);\r\n        return tweetIDs ?? [];\r\n      }\r\n    },\r\n    slug: {\r\n      type: 'string',\r\n      resolve: (doc) => doc._raw.sourceFileName.replace(/\\.mdx$/, '')\r\n    }\r\n  };\r\n  \r\n  const Blog = defineDocumentType(() => ({\r\n    name: 'Blog',\r\n    filePathPattern: 'blog/*.mdx',\r\n    bodyType: 'mdx',\r\n    fields: {\r\n      title: { type: 'string', required: true },\r\n      publishedAt: { type: 'string', required: true },\r\n      summary: { type: 'string', required: true },\r\n      image: { type: 'string', required: true }\r\n    },\r\n    computedFields\r\n  }));\r\n  \r\n  const Newsletter = defineDocumentType(() => ({\r\n    name: 'Newsletter',\r\n    filePathPattern: 'newsletter/*.mdx',\r\n    bodyType: 'mdx',\r\n    fields: {\r\n      title: { type: 'string', required: true },\r\n      publishedAt: { type: 'string', required: true },\r\n      summary: { type: 'string', required: true },\r\n      image: { type: 'string', required: true }\r\n    },\r\n    computedFields\r\n  }));\r\n  \r\n  const Snippet = defineDocumentType(() => ({\r\n    name: 'Snippet',\r\n    filePathPattern: 'snippets/*.mdx',\r\n    bodyType: 'mdx',\r\n    fields: {\r\n      title: { type: 'string', required: true },\r\n      description: { type: 'string', required: true },\r\n      logo: { type: 'string', required: true }\r\n    },\r\n    computedFields\r\n  }));\r\n  \r\n  const OtherPage = defineDocumentType(() => ({\r\n    name: 'OtherPage',\r\n    filePathPattern: '*.mdx',\r\n    bodyType: 'mdx',\r\n    fields: {\r\n      title: { type: 'string', required: true }\r\n    },\r\n    computedFields\r\n  }));\r\n  \r\n  const contentLayerConfig = makeSource({\r\n    contentDirPath: 'data',\r\n    documentTypes: [Blog, Newsletter, Snippet, OtherPage],\r\n    mdx: {\r\n      remarkPlugins: [remarkGfm],\r\n      rehypePlugins: [\r\n        rehypeSlug,\r\n        rehypeCodeTitles,\r\n        rehypePrism,\r\n        [\r\n          rehypeAutolinkHeadings,\r\n          {\r\n            properties: {\r\n              className: ['anchor']\r\n            }\r\n          }\r\n        ]\r\n      ]\r\n    }\r\n  });\r\n  \r\n  export default contentLayerConfig;"],
  "mappings": ";AAAA;AAAA;AAAA;AAAA;AAME;AACA;AACA;AACA;AACA;AACA;AAEA,IAAM,iBAAiC;AAAA,EACrC,aAAa,EAAE,MAAM,QAAQ,SAAS,CAAC,QAAQ,YAAY,IAAI,KAAK;AAAA,EACpE,WAAW;AAAA,IACT,MAAM;AAAA,IACN,SAAS,CAAC,QAAQ,IAAI,KAAK,IAAI,MAAM,SAAS;AAAA;AAAA,EAEhD,UAAU;AAAA,IACR,MAAM;AAAA,IACN,SAAS,CAAC,QAAQ;AAChB,YAAM,eAAe,IAAI,KAAK,IAAI,MAChC;AAEF,YAAM,WAAW,cAAc,IAAI,CAAC,UAAU,MAAM,MAAM,WAAW;AACrE,aAAO,YAAY;AAAA;AAAA;AAAA,EAGvB,MAAM;AAAA,IACJ,MAAM;AAAA,IACN,SAAS,CAAC,QAAQ,IAAI,KAAK,eAAe,QAAQ,UAAU;AAAA;AAAA;AAIhE,IAAM,OAAO,mBAAmB,MAAO;AAAA,EACrC,MAAM;AAAA,EACN,iBAAiB;AAAA,EACjB,UAAU;AAAA,EACV,QAAQ;AAAA,IACN,OAAO,EAAE,MAAM,UAAU,UAAU;AAAA,IACnC,aAAa,EAAE,MAAM,UAAU,UAAU;AAAA,IACzC,SAAS,EAAE,MAAM,UAAU,UAAU;AAAA,IACrC,OAAO,EAAE,MAAM,UAAU,UAAU;AAAA;AAAA,EAErC;AAAA;AAGF,IAAM,aAAa,mBAAmB,MAAO;AAAA,EAC3C,MAAM;AAAA,EACN,iBAAiB;AAAA,EACjB,UAAU;AAAA,EACV,QAAQ;AAAA,IACN,OAAO,EAAE,MAAM,UAAU,UAAU;AAAA,IACnC,aAAa,EAAE,MAAM,UAAU,UAAU;AAAA,IACzC,SAAS,EAAE,MAAM,UAAU,UAAU;AAAA,IACrC,OAAO,EAAE,MAAM,UAAU,UAAU;AAAA;AAAA,EAErC;AAAA;AAGF,IAAM,UAAU,mBAAmB,MAAO;AAAA,EACxC,MAAM;AAAA,EACN,iBAAiB;AAAA,EACjB,UAAU;AAAA,EACV,QAAQ;AAAA,IACN,OAAO,EAAE,MAAM,UAAU,UAAU;AAAA,IACnC,aAAa,EAAE,MAAM,UAAU,UAAU;AAAA,IACzC,MAAM,EAAE,MAAM,UAAU,UAAU;AAAA;AAAA,EAEpC;AAAA;AAGF,IAAM,YAAY,mBAAmB,MAAO;AAAA,EAC1C,MAAM;AAAA,EACN,iBAAiB;AAAA,EACjB,UAAU;AAAA,EACV,QAAQ;AAAA,IACN,OAAO,EAAE,MAAM,UAAU,UAAU;AAAA;AAAA,EAErC;AAAA;AAGF,IAAM,qBAAqB,WAAW;AAAA,EACpC,gBAAgB;AAAA,EAChB,eAAe,CAAC,MAAM,YAAY,SAAS;AAAA,EAC3C,KAAK;AAAA,IACH,eAAe,CAAC;AAAA,IAChB,eAAe;AAAA,MACb;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,QACE;AAAA,QACA;AAAA,UACE,YAAY;AAAA,YACV,WAAW,CAAC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQxB,IAAO,8BAAQ;",
  "names": []
}
